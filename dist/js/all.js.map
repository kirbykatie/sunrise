{"version":3,"sources":["_canvas-anim.js","_data.js","_date.js","main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtfile":"all.js","sourcesContent":["//This is the beginning of all the canvas animations functions\n//also i SUPER don't know what I'm doing lmao\nfunction canvasNight() {\n  const canvas = document.querySelector(\"canvas\");\n  //will need an event listener to resize if screen resizes. However, resizing will erase all items on canvas \n  canvas.setAttribute(\"width\", window.innerWidth);\n  canvas.setAttribute(\"height\", window.innerHeight);\n\n\n  const ctx = canvas.getContext('2d');\n  const centerX = canvas.width / 2;\n  const centerY = canvas.height /2;\n \n  \n  //Use this: https://codepen.io/dicson/pen/GrpLYG\n  //to help with animating stars\n  ctx.arc(centerX, centerY, 10, 0, 2 * Math.PI);\n  ctx.fill();\n\n}","function getColorData() {\n\tconst data = {\n\t\t/*within each section is a map - key being a # which will be used to compare \n\t\tthe current minute to/from sunrise/sunset and the value being what is returned \n\t\tfor the app to use to create the gradient.*/\n\t\tdawn: {\n\t\t\t//90: beginning of dawn\n\t\t\t//0: sunrise\n\t\t\t90: `linear-gradient(180deg, rgba(2,0,36,1) 85%, rgba(4,23,46,1) 100%)`,\n\t\t\t89: `linear-gradient(180deg, rgba(2,0,36,1) 84%, rgba(5,26,50,1) 100%)`,\n\t\t\t88: `linear-gradient(180deg, rgba(2,0,36,1) 83%, rgba(6,28,55,1) 100%)`,\n\t\t\t87: `linear-gradient(180deg, rgba(2,0,36,1) 81%, rgba(6,30,60,1) 100%)`,\n\t\t\t86: `linear-gradient(180deg, rgba(2,0,36,1) 80%, rgba(7,33,64,1) 100%)`,\n\t\t\t85: `linear-gradient(180deg, rgba(2,0,36,1) 78%, rgba(8,36,69,1) 100%)`,\n\t\t\t84: `linear-gradient(180deg, rgba(2,0,36,1) 77%, rgba(10,40,74,1) 100%)`,\n\t\t\t83: `linear-gradient(180deg, rgba(2,0,36,1) 75%, rgba(11,44,80,1) 100%)`, \n\t\t\t82: `linear-gradient(180deg, rgba(2,0,36,1) 72%, rgba(11,44,80,1) 100%)`,\n\t\t\t81: `linear-gradient(180deg, rgba(2,0,36,1) 69%, rgba(11,45,81,1) 100%)`,\n\t\t\t80: `linear-gradient(180deg, rgba(2,0,36,1) 67%, rgba(11,46,82,1) 100%)`,\n\t\t\t79: `linear-gradient(180deg, rgba(2,0,36,1) 64%, rgba(11,47,85,1) 100%)`,\n\t\t\t78: `linear-gradient(180deg, rgba(2,0,36,1) 61%, rgba(11,48,86,1) 100%)`,\n\t\t\t77: `linear-gradient(180deg, rgba(2,0,36,1) 58%, rgba(11,49,86,1) 100%)`,\n\t\t\t76: `linear-gradient(180deg, rgba(2,0,36,1) 55%, rgba(11,50,87,1) 100%)`,\n\t\t\t75: `linear-gradient(180deg, rgba(2,0,36,1) 50%, rgba(12,52,87,1) 100%)`,\n\t\t\t74: `linear-gradient(180deg, rgba(2,0,36,1) 50%, rgba(12,52,87,1) 100%)`,\n\t\t\t73: `linear-gradient(180deg, rgba(2,0,36,1) 50%, rgba(12,52,87,1) 96%, rgba(60,62,59,1) 100%)`,\n\t\t\t72: `linear-gradient(180deg, rgba(2,0,36,1) 50%, rgba(12,52,87,1) 92%, rgba(64,60,60,1) 100%)`,\n\t\t\t71: `linear-gradient(180deg, rgba(2,0,36,1) 49%, rgba(12,54,89,1) 88%, rgba(70,64,64,1) 100%)`,\n\t\t\t70: `linear-gradient(180deg, rgba(2,0,36,1) 48%, rgba(12,58,90,1) 86%, rgba(69,64,59,1) 98%, rgba(100,54,10,1) 100%)`,\n\t\t\t69: `linear-gradient(180deg, rgba(2,0,36,1) 47%, rgba(12,58,90,1) 84%, rgba(69,64,59,1) 97%, rgba(100,35,10,1) 100%)`,\n\t\t\t68: `linear-gradient(180deg, rgba(2,0,36,1) 45%, rgba(12,58,90,1) 82%, rgba(69,64,59,1) 95%, rgba(103,37,11,1) 100%)`,\n\t\t\t67: `linear-gradient(180deg, rgba(2,0,36,1) 45%, rgba(12,58,90,1) 80%, rgba(69,64,59,1) 94%, rgba(106,39,11,1) 100%)`,\n\t\t\t66: ``,\n\t\t\t65: ``,\n\t\t\t64: `linear-gradient(180deg, rgba(2,0,36,1) 43%, rgba(14,60,98,1) 77%, rgba(75,67,59,1) 91%, rgba(126,45,13,1) 100%)`,\n\t\t\t62: ``,\n\t\t\t60: `linear-gradient(180deg, rgba(2,0,36,1) 40%, rgba(14,64,107,1) 74%, rgba(79,70,59,1) 87%, rgba(143,53,16,1) 100%)`,\n\t\t\t53: ``,\n\t\t\t52: ``,\n\t\t\t50: ``,\n\t\t\t45: `linear-gradient(180deg, rgba(2,0,36,1) 20%, rgba(14,64,107,1) 71%, rgba(90,108,103,1) 82%, rgba(255,181,79,1) 92%, rgba(231,89,30,1) 100%)`,\n\t\t\t40: ``,\n\t\t\t38: ``,\n\t\t\t37: ``,\n\t\t\t30: `linear-gradient(180deg, rgba(2,0,36,1) 0%, rgba(0,32,113,1) 33%, rgba(51,103,130,1) 60%, rgba(129,154,146,1) 77%, rgba(255,199,79,1) 91%, rgba(231,123,30,1) 100%)`,\n\t\t\t23: ``,\n\t\t\t22: ``,\n\t\t\t20: ``,\n\t\t\t15: `linear-gradient(180deg, rgba(6,10,99,1) 0%, rgba(0,50,122,1) 21%, rgba(62,119,149,1) 53%, rgba(150,170,163,1) 75%, rgba(255,199,79,1) 86%, rgba(241,170,86,1) 100%)`,\n\t\t\t10: ``,\n\t\t\t8: ``,\n\t\t\t7: ``,\n\t\t\t1: `linear-gradient(180deg, rgba(0,32,113,1) 0%, rgba(24,74,143,1) 21%, rgba(98,168,204,1) 55%, rgba(236,169,64,1) 84%, rgba(255,199,79,1) 100%)`\n\t\t},\n\t\tdaybreak: {\n\t\t\t0: `linear-gradient(180deg, rgba(0,32,113,1) 0%, rgba(24,74,143,1) 21%, rgba(98,168,204,1) 55%, rgba(236,169,64,1) 84%, rgba(255,199,79,1) 100%)`\n\t\t\t//0: sunrise\n\t\t\t//90: day\n\n\t\t},\n\t\tsunsetting: {\n\t\t\t//0: beginning of sunset\n\t\t\t//90: actual technical sunset\n\t\t},\n\t\tdusk: {\n\t\t\t//0: sunset\n\t\t\t//90: end of dusk\n\t\t}\n\t};\n\treturn data;\n}","/*function renderDay(num) {\n\tlet day;\n \tswitch (num) {\n \t\tcase 0: \n \t\t\tday = `Sunday, `;\n \t\t\tbreak;\n \t\tcase 1: \n \t\t\tday = `Monday, `;\n \t\t\tbreak;\n \t\tcase 2: \n \t\t\tday = `Tuesday, `;\n \t\t\tbreak;\n \t\tcase 3: \n \t\t\tday = `Wednesday, `;\n \t\t\tbreak;\n \t\tcase 4: \n \t\t\tday = `Thursday, `;\n \t\t\tbreak;\n \t\tcase 5: \n \t\t\tday = `Friday, `;\n \t\t\tbreak;\n \t\tcase 6: \n \t\t\tday = `Saturday, `;\n \t\t\tbreak;\n \t\tdefault:\n \t\t\tday = `Day, `;\n \t}\n\treturn day;\n}\n\nfunction renderMonth(num) {\n\tlet month;\n \tswitch (num) {\n \t\tcase 0: \n \t\t\tmonth = `January `;\n \t\t\tbreak;\n \t\tcase 1: \n \t\t\tmonth = `February `;\n \t\t\tbreak;\n \t\tcase 2: \n \t\t\tmonth = `March `;\n \t\t\tbreak;\n \t\tcase 3: \n \t\t\tmonth = `April `;\n \t\t\tbreak;\n \t\tcase 4: \n \t\t\tmonth = `May `;\n \t\t\tbreak;\n \t\tcase 5: \n \t\t\tmonth = `June `;\n \t\t\tbreak;\n \t\tcase 6: \n \t\t\tmonth = `July `;\n \t\t\tbreak;\n \t\tcase 7: \n \t\t\tmonth = `August `;\n \t\t\tbreak;\n \t\tcase 8: \n \t\t\tmonth = `September `;\n \t\t\tbreak;\n \t\tcase 9: \n \t\t\tmonth = `October `;\n \t\t\tbreak;\n \t\tcase 10: \n \t\t\tmonth = `November `;\n \t\t\tbreak;\n \t\tcase 11: \n \t\t\tmonth = `December `;\n \t\t\tbreak;\n \t\tdefault:\n \t\t\tmonth = `Month `;\n \t}\n\treturn month;\n}\n*/","//import DarkSkyApi from 'dark-sky-api';\n//import Chroma from 'chroma';\n//which im not using anymore LMAO\n\n/*\nUtility function that returns a string relating to the Date Obj's day of week\n@param - {numeral} Date Obj's day of week \n@return - {string} Day name with comma and space at the end\n*/\nfunction renderDay(num) {\n  let day;\n  switch (num) {\n    case 0: \n      day = `Sunday, `;\n      break;\n    case 1: \n      day = `Monday, `;\n      break;\n    case 2: \n      day = `Tuesday, `;\n      break;\n    case 3: \n      day = `Wednesday, `;\n      break;\n    case 4: \n      day = `Thursday, `;\n      break;\n    case 5: \n      day = `Friday, `;\n      break;\n    case 6: \n      day = `Saturday, `;\n      break;\n    default:\n      day = `Day, `;\n  }\n  return day;\n}\n\n/*\nUtility function that returns a string relating to the Date Obj's month\n@param - {numeral} Date Obj's month \n@return - {string} Month name with space at the end\n*/\nfunction renderMonth(num) {\n  let month;\n  switch (num) {\n    case 0: \n      month = `January `;\n      break;\n    case 1: \n      month = `February `;\n      break;\n    case 2: \n      month = `March `;\n      break;\n    case 3: \n      month = `April `;\n      break;\n    case 4: \n      month = `May `;\n      break;\n    case 5: \n      month = `June `;\n      break;\n    case 6: \n      month = `July `;\n      break;\n    case 7: \n      month = `August `;\n      break;\n    case 8: \n      month = `September `;\n      break;\n    case 9: \n      month = `October `;\n      break;\n    case 10: \n      month = `November `;\n      break;\n    case 11: \n      month = `December `;\n      break;\n    default:\n      month = `Month `;\n  }\n  return month;\n}\n\n/*\nUtility function that returns the total minutes since midnight.\n@param - Date object\n@return - {numeral} value of total minutes of day\n*/\nfunction timeToMins(date) {\n  return (date.getHours() * 60) + date.getMinutes();\n}\n/*\nUtility function that takes an object that uses numeral keys and returns a map \nEnsures the keys are actually numerals and not strings\nTO DO - add validation that only numeral keys are being added. For some reason if (Number(k) != NaN) doesn't work.\n*/\nfunction numKeyToStrMap(obj) {\n    let strMap = new Map();\n    for (let k in obj) {\n      strMap.set(Number(k), obj[k]);\n    }\n    return strMap;\n}\n\n/*\nNOT BEING USED\nCurrently not used - Color Class \nProperites - 4 rgba items \nMethods:\n  renderColor: returns a string of the color written in a way CSS can use it\n  setColor: takes an array with the 4 rgba items and sets the properities accoringly.\n*/\nfunction Color(r = 0, g = 0, b = 0, a = 1) {\n  this.r = r;\n  this.g = g;\n  this.b = b;\n  this.a = a;\n  this.renderColor = function() {\n    return `rgba(${this.r},${this.g},${this.b},${this.a})`;\n  }\n  this.setColor = function(c) {\n    this.r = c[0];\n    this.g = c[1];\n    this.b = c[2];\n    this.a = c[3];\n  }\n}\n\n/*\nNOT BEING USED\nCreates an even gradient that is always 6 colors\n@param - {function} - Chroma.scale function with colors already defined\n@return - {string} - String of generated gradient ready to be used in CSS\n*/\nfunction generateGradientBkgd(scale) {\n  let returnedColor;  //receives the chroma color obj that is returned from scale()\n  let gradientStr = `linear-gradient(180deg, `; \n  for (let i = 0; i <= 1; i += 0.2) {\n    returnedColor = scale(i);\n    gradientStr = gradientStr + `rgba(${Math.round(returnedColor._rgb[0])}, ${Math.round(returnedColor._rgb[1])}, ${Math.round(returnedColor._rgb[2])}, ${Math.round(returnedColor._rgb[3])}) ${Math.round(i*100)}%${i == 1 ? ')' : ','}`;\n  }\n  return gradientStr;\n}\n\n/*\nNOT BEING USED\nThis is a temporary function that, when run, the background starts to change every 1 second \n*/\nfunction tempIncrementGradient(scale) {\n  let darkestColor = scale(0);\n  let lightestColor = scale(1);\n  darkestColor = darkestColor.brighten(0.05);\n  lightestColor = lightestColor.brighten(0.05);\n  scale = chroma.scale([darkestColor,lightestColor]);\n  console.log(generateGradientBkgd(scale));\n  return scale;\n}\n\n//functions to try to smooth the transition. currently not working and not called anywhere. this is due to gradients not being able to transition in CSS atm.\nfunction startTransition(gradient) {\n  let body = document.body;\n  let root = document.documentElement;\n  root.style.setProperty('--backgroundGradientNew', gradient);\n  body.classList.add('transitioning');\n}\n\nfunction stopTransition(gradient) {\n  let body = document.body;\n  let root = document.documentElement;\n  root.style.setProperty('--backgroundGradient', gradient);\n  body.classList.remove('transitioning');\n}\n\n//This is a temporary function for testing - it increases the minute of the test date so each run of getBkgd is incremented\nfunction tempFixDate(testDate, i) {\n  let mins = testDate.getMinutes();\n  let hours = testDate.getHours();\n  if (mins >= 59) {\n    testDate.setMinutes(0);\n    if (hours >= 23) {\n       testDate.setHours(0);\n    } else {\n      testDate.setHours(hours + 1);\n    }\n  } else {\n    testDate.setMinutes(mins + i);\n  }\n  console.log('updated time is now ' + testDate);\n  return testDate;\n}\n\n\n/*This function creates the scale based on the current time and sunrise time. \nEventually, the function will only recieve the sunrise & sunset time, but while building it will get current time as well*/\nfunction getBkgd(current, sunrise, sunset, data) {\n  const curMins = timeToMins(current);\n  const sunriseMins = timeToMins(sunrise);\n  const sunsetMins = timeToMins(sunset);\n  const dayMiddle = sunsetMins - sunriseMins;\n  let bkgd;\n  if (curMins < dayMiddle) {\n    if (curMins < sunriseMins) {\n      if ((sunriseMins - curMins) > 90) {\n        console.log('night');\n        //canvasNight();\n      }\n      else {\n        console.log('dawn');\n        console.log('map should target ' + (sunriseMins - curMins));\n        let dawnMap = data.dawn;\n        dawnMap = numKeyToStrMap(dawnMap);\n        console.log(dawnMap);\n        bkgd = dawnMap.get(sunriseMins - curMins); \n      }\n    } else {  //sunrise also included\n      if ((curMins - sunriseMins) < 90) {\n        console.log('daybreak');\n        console.log('map should target ' + (curMins - sunriseMins));\n        let daybreakMap = data.daybreak;\n        daybreakMap = numKeyToStrMap(daybreakMap);\n        console.log(daybreakMap);\n        bkgd = daybreakMap.get(curMins - sunriseMins);\n      }\n      else {\n        console.log('day');\n      }\n    }\n  } else {\n    if (curMins < sunsetMins) {\n      if ((sunsetMins - curMins) > 90) {\n        console.log('day');\n      }\n      else {\n        console.log('sun starts to set');\n        console.log('map should target ' + (sunsetMins - curMins));\n        let sunsetMap = data.sunsetting;\n        sunsetMap = numKeyToStrMap(sunsetMap);\n        console.log(sunsetMap);\n        bkgd = sunsetMap.get(sunsetMins - curMins);\n      }\n    } else { //I THINK also includes sunset \n      if ((curMins - sunsetMins) < 90) {\n        console.log('dusk');\n        console.log('map should target ' + (curMins - sunsetMins));\n        let duskMap = data.dusk;\n        duskMap = numKeyToStrMap(duskMap);\n        console.log(duskMap);\n        bkgd = duskMap.get(curMins - sunsetMins);\n      }\n      else {\n        console.log('night');\n      }\n    }\n  }\n  return bkgd;\n}\n\n/*\nThis is a semi-temporary function in place to run with the test buttons. It will update the background with the accurate daylight \nEventually, this will be adjusted to just get the allGradients data and sunrise/sunset data and kick off the getBkgd() interval\nIt's basically evolved to be the gradient's portion \"main\" function, and should be renamed accordingly.\n*/\nfunction testApp(id) {\n  const allGradients = getColorData();\n  let root = document.documentElement;\n  let newBkgd;\n  let testDate = new Date();\n  testDate.setMinutes(0);\n  let sunrise = new Date();\n  sunrise.setHours(7);\n  sunrise.setMinutes(0);\n  let sunset = new Date();\n  sunset.setHours(18);  //6pm\n  sunset.setMinutes(0);\n  if (id == \"night\") {\n    testDate.setHours(1);\n  } else if (id == \"dawn\") {\n    testDate.setHours(5);\n    testDate.setMinutes(30);\n  } else if (id == \"daybreak\") {\n    testDate.setHours(7);\n  } else if (id == \"noon\") {\n    testDate.setHours(12);\n  } else if (id == \"sunsetting\") {\n    testDate.setHours(16);\n    testDate.setMinutes(30);\n  } else if (id == \"dusk\") {\n    testDate.setHours(18);\n  } else if (id == \"random\") {\n    console.log('not ready yet');\n    testDate.setHours(5);\n    testDate.setMinutes(45);\n  }\n  console.log(testDate);\n  setInterval(function() {\n    newBkgd = getBkgd(testDate, sunrise, sunset, allGradients);\n    console.log(newBkgd);\n    root.style.setProperty('--backgroundGradient', newBkgd);\n    testDate = tempFixDate(testDate, 1);\n  }, 1000); //starting with 2 seconds\n}\n\n/*\nThis function gets the current date and time and then displays it \nInterval set to run every second\n*/\nfunction setDate() {\n  const hourID = document.querySelector('#hour');\n  const minID = document.querySelector('#minute');\n  const dayID = document.querySelector('#day');\n  const monthID = document.querySelector('#month');\n  const dateID = document.querySelector('#date');\n  const yearID = document.querySelector('#year');\n\n  const now = new Date();\n  let hour = now.getHours();\n  let min = now.getMinutes();\n  let day = now.getDay();\n  let month = now.getMonth();\n  let date = now.getDate();\n  let year = now.getFullYear();\n\n  if (hour == 0) {\n    hourID.innerHTML = 12;\n  } else {\n     hourID.innerHTML = `${hour > 12 ? hour - 12 : hour}`;\n  }\n  minID.innerHTML = `${min < 10 ? '0' : ''}${min}`; \n  dayID.innerHTML = renderDay(day);\n  monthID.innerHTML = renderMonth(month);\n  dateID.innerHTML = `${date}, `; \n  yearID.innerHTML = year;\n}\n\n//Start of script\nsetInterval(setDate, 1000);\n//setInterval(setTheme, (2*60000)); //2 mins\nsetDate();\n//setTheme();\nconst btns = document.querySelectorAll(\"button\").forEach(function(button){\n  button.addEventListener(\"click\", function(event) {\n    testApp(event.target.id);\n  });\n})\n\n\n"]}